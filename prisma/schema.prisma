generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  projects Project[]
  members  Member[]
  pages    Page[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String @id @default(uuid())
  name        String
  description String @db.Text
  inviteCode  String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members    Member[]
  pages      Page[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  DEVELOPER
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(DEVELOPER)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([projectId])
}

model Page {
  id   String @id @default(uuid())
  name String
  nameEN String
  code String @default("export default function Empty() {return <div>暂无内容</div>;}")
 
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([projectId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  response String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  pageId String
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pageId])
  @@index([memberId])
}
